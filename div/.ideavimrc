"" Source my .vimrc
" source ~/.vimrc
"
source /home/magstr/dotfiles/div/.idea-lazy.vim

"" IDE specific Key mappings ====================================================

" :actionlist shows all ide actions, nice

"" -- Help for map IDE actions to IdeaVim -- https://jb.gg/abva4t

"" .ideavimrc - magidc
"" https://github.com/magidc/dotfiles/blob/master/.ideavimrc

"" Settings ========================================================


"" Choosing handlers in conflicting Intellij/IdeaVim keymaps =======
""https://github.com/JetBrains/ideavim/blob/master/doc/sethandler.md
sethandler <C-i> n-v-i:vim
sethandler <C-o> n-v-i:vim
sethandler <C-d> n-v-i:vim
sethandler <C-u> n-v-i:vim
sethandler <C-h> n-v-i:vim
sethandler <C-j> n-v-i:vie
sethandler <C-l> n-v-i:vim

" NORMAL MODE

" Motions
nnoremap <C-o> :action Back<cr>
nnoremap <C-i> :action Forward<cr>

" Windows and buffers (leader w)
nnoremap <a-w> :action CloseAllEditorsButActive<cr>
nnoremap <a-q> :action CloseContent<cr>
nnoremap <a-t> :action NewScratchFile<cr>
nnoremap <leader>- :action SplitVertically<cr>
nnoremap <leader>| :action SplitHorizontally<cr>
nnoremap <leader>wu :action Unsplit<cr>
nnoremap <leader>wm :action MoveEditorToOppositeTabGroup<cr>
nnoremap <Leader>wn :action EditSourceInNewWindow<CR>

" Folds
map | :action CollapseAllRegions<CR>
map -- :action ExpandAllRegions<CR>

" Finder (leader f)
" map <leader>fc :action GotoClass<cr>
" map <leader>ff :action GotoFile<cr>
" map <leader>fa :action GotoAction<cr>
" map <leader>fg :action FindInPath<cr>
" map <leader>fo :action RecentFiles<cr>
" map <leader>fm :action RecentLocations<cr>
" map <leader>fs :action GotoSymbol<cr>
" map <leader>fz :action Find<cr>
" map <leader>fr :action Replace<cr>
" map <leader>fR :action ReplaceInPath<cr>
" map <leader>fx :action PasteMultiple<cr>
" map <leader>ft :action ActivateTODOToolWindow<cr>

" Views (leader v)
map <leader>vf :action ActivateProjectToolWindow<cr>
map <leader>vp :action ActivateProblemsViewToolWindow<cr>
map <leader>vs :action ActivateStructureToolWindow<cr>
map <leader>vt :action ActivateTerminalToolWindow<cr>
map <leader>vv :action ActivateServicesToolWindow<cr>
map <leader>vd :action ActivateDebugToolWindow<cr>
map <leader>vq :action CloseActiveTab<cr>

" Debug leader x)
" nnoremap <leader>xr :action Run<cr>
" nnoremap <leader>xR :action ChooseRunConfiguration<cr>
" nnoremap <leader>xd :action Debug<cr>
" nnoremap <leader>xD :action ChooseDebugConfiguration<cr>
" nnoremap <leader>xk :action Stop<cr>
" nnoremap <leader>xb :action ToggleLineBreakpoint<cr>
" nnoremap <leader>xa :action XDebugger.MuteBreakpoints<cr>
" nnoremap <leader>xv :action StepOver<cr>
" nnoremap <leader>xi :action StepInto<cr>
" nnoremap <leader>xo :action StepOut<cr>
" nnoremap <leader>xc :action Resume<cr>
" map <leader>xx :action QuickEvaluateExpression<cr>
" map <leader>xe :action EvaluateExpression<cr>
" map <leader>xw :action Debugger.AddToWatch<cr>

" Code navigation (leader c)
" nnoremap <leader>cd :action GotoDeclaration<cr>
" nnoremap <leader>ct :action GotoTypeDeclaration<cr>
" nnoremap <leader>ci :action GotoImplementation<cr>
" nnoremap <leader>cs :action GotoSuperMethod<cr>
" nnoremap <leader>cr :action ShowUsages<cr>
" nnoremap <leader>cv :action QuickJavaDoc<cr>
" nnoremap <leader>ch :action CallHierarchy<CR>
" nnoremap <leader>cn :action ShowNavBar<CR>
" nnoremap <leader>cf :action FileStructurePopup<CR>

" Refactoring (leader r)
map <leader>re :action Refactorings.QuickListPopupAction<CR>
map <leader>rn :action RenameElement<cr>
map <leader>rv :action IntroduceVariable<cr>
map <leader>rc :action IntroduceConstant<cr>
map <leader>rf :action IntroduceField<cr>
map <leader>rx :action ExtractMethod<cr>
map <leader>rf :action ReformatCode<cr>
map <leader>ro :action OptimizeImports<cr>
map <leader>ri :action Inline<cr>
map <leader>ra :action AnonymousToInner<cr>
map <leader>rm :action Move<cr>

" Source generation (leader s)
nnoremap <leader>gn :action GenerateConstructor<cr>
" nnoremap <leader>sg :action GenerateGetterAndSetter<cr>
" nnoremap <leader>se :action GenerateEquals<cr>
" nnoremap <leader>sn :action NewClass<cr>

" Display Modes (leader m)
map <leader>md :action ToggleDistractionFreeMode<cr>
map <leader>mz :action ToggleZenMode<cr>
map <leader>mf :action ToggleFullScreen<cr>

" VISUAL MODE
vnoremap + :action EditorSelectWord<cr>
vnoremap _ :action EditorUnSelectWord<cr>

" Plugin Settings ==================================================

" Which-key settings
set which-key
" disable the timeout option
set notimeout
let g:WhichKey_FontSize = 16
let g:WhichKey_CommandColor = "#41ead4"
let g:WhichKey_PrefixColor = "#f335b2"
let g:WhichKey_SortOrder = "by_key_prefix_first"

let g:WhichKeyDesc_leader = "<leader> Leader key"
let g:WhichKeyDesc_easymotion = "s Jump with Easymotion"
let g:WhichKeyDesc_leader_deleteargument = "<leader>x Delete function argument"
let g:WhichKeyDesc_leader_changeargument = "<leader>a Delete function argument"
let g:WhichKeyDesc_leader_replacewithpaste = "<leader>p Replace with paste"
let g:WhichKeyDesc_leader_changeparentheses = "<leader>/ Change inside parentheses"
let g:WhichKeyDesc_leader_changequotes = "<leader>z Change inside quotes"
let g:WhichKeyDesc_leader_changeword = "<leader>c Change whole word"
let g:WhichKeyDesc_leader_newline = "<leader>o New line in normal mode"
let g:WhichKeyDesc_leader_newprevline = "<leader>O New line before in normal mode"

" Windows and buffers (leader w)
let g:WhichKeyDesc_leader_window = "<leader>w Window actions"
let g:WhichKeyDesc_window_splitvertical = "<leader>| Split vertically"
let g:WhichKeyDesc_window_splithorizontal = "<leader>- Split horizontally"
let g:WhichKeyDesc_window_splitundo = "<leader>wu Unsplit"
let g:WhichKeyDesc_window_movetooppositetabgroup = "<leader>wm Move editor to opposite tab group"
let g:WhichKeyDesc_window_editinnewwindow = "<leader>wn Edit in new window"

" Folds
let g:WhichKeyDesc_fold_collapseall = "| Collapse all folds"
let g:WhichKeyDesc_fold_expandall = "-- Expand all folds"

" Macros and registers
let g:WhichKeyDesc_leader_executequickmacro = "<leader>q Execute macro stored in 'q' register"

" Finder (leader f)
let g:WhichKeyDesc_leader_finder = "<leader>f Finder actions"
let g:WhichKeyDesc_finder_class = "<leader>fc Find class"
let g:WhichKeyDesc_finder_actions = "<leader>fa Find actions"
let g:WhichKeyDesc_finder_file = "<leader>ff Find files (Name)"
eet g:WhichKeyDesc_finder_grep = "<leader>fg Find in files (Grep)"
let g:WhichKeyDesc_finder_history = "<leader>sre Find recent files (History)"
let g:WhichKeyDesc_finder_location = "<leader>fm Find recent locations (Marks)"
let g:WhichKeyDesc_finder_symbol = "<leader>fs Find symbol"
let g:WhichKeyDesc_finder_find = "<leader>fz Find in current file"
let g:WhichKeyDesc_finder_replace = "<leader>fr Find and replace in current file <Ctrl-r>"
let g:WhichKeyDesc_finder_replaceinfiles = "<leader>fR Find and replace in files"
let g:WhichKeyDesc_finder_clipboard = "<leader>fx Find in clipboard"
let g:WhichKeyDesc_finder_todo = "<leader>ft Find in TODO list"

" Views (leader v)
let g:WhichKeyDesc_leader_views = "<leader>v View actions"
let g:WhichKeyDesc_views_project = "<leader>vf Project view (Files)"
let g:WhichKeyDesc_views_problems = "<leader>vp Problems and diganostics view"
let g:WhichKeyDesc_views_structure = "<leader>vs Structure view"
let g:WhichKeyDesc_views_terminal = "<leader>vt Terminal"
let g:WhichKeyDesc_views_services = "<leader>vv Services view"
let g:WhichKeyDesc_views_debug = "<leader>vd Debug view"
let g:WhichKeyDesc_views_close = "<leader>vq Close view"

" Debug (leader x)
let g:WhichKeyDesc_leader_debug = "<leader>x Debug actions"
let g:WhichKeyDesc_debug_run = "<leader>xr Run"
let g:WhichKeyDesc_debug_chooserun = "<leader>xR Choose run"
let g:WhichKeyDesc_debug_debug = "<leader>xd Debug"
let g:WhichKeyDesc_debug_choosedebug = "<leader>xD Choose debug"
let g:WhichKeyDesc_debug_stop = "<leader>xk Stop (Kill)"
let g:WhichKeyDesc_debug_togglelinebreakpoint = "<leader>xb Toggle breakpoint"
let g:WhichKeyDesc_debug_muteallbreakpoints = "<leader>xa Mute All breakpoints"
let g:WhichKeyDesc_debug_stepover = "<leader>xv Step oVer"
let g:WhichKeyDesc_debug_stepinto = "<leader>xi Step into"
let g:WhichKeyDesc_debug_stepout = "<leader>xo Step Out"
let g:WhichKeyDesc_debug_continue = "<leader>xc Continue"
let g:WhichKeyDesc_debug_quickevaluate = "<leader>xx Evaluate selectec expression"
let g:WhichKeyDesc_debug_evaluate = "<leader>xe Evaluate expression"
let g:WhichKeyDesc_debug_watch = "<leader>xw Add to watch"

" Code navigation (leader c)
let g:WhichKeyDesc_leader_code = "<leader>c Code actions"
let g:WhichKeyDesc_code_gotodeclaration = "<leader>cd Go to declaration"
let g:WhichKeyDesc_code_gototypedeclaration = "<leader>ct Go to type declaration"
let g:WhichKeyDesc_code_gotoimplementation = "<leader>ci Go to implementation"
let g:WhichKeyDesc_code_gotosupermethod = "<leader>cs Go to super method"
let g:WhichKeyDesc_code_gotousages = "<leader>cr Show usages (References)"
let g:WhichKeyDesc_code_doc = "<leader>cv Show docs (hooVer)"
let g:WhichKeyDesc_code_callhierarchy = "<leader>ch Show call hierarchy"
let g:WhichKeyDesc_code_navbar = "<leader>cn Show navigation bar"
let g:WhichKeyDesc_code_filestructure = "<leader>cf Show file structure"

" Refactoring (leader r)
let g:WhichKeyDesc_leader_refactor = "<leader>r Refactoring actions"
let g:WhichKeyDesc_refactor_showactions = "<leader>re Show actions"
let g:WhichKeyDesc_refactor_renameelement = "<leader>rn Rename element"
let g:WhichKeyDesc_refactor_introducevariable = "<leader>rv Introduce variable"
let g:WhichKeyDesc_refactor_introduceconstant = "<leader>rc Introduce constant"
let g:WhichKeyDesc_refactor_introducefield = "<leader>rf Introduce field"
let g:WhichKeyDesc_refactor_extractmethod = "<leader>re Extract method"
let g:WhichKeyDesc_refactor_formatcode = "<leader>rf Format code"
let g:WhichKeyDesc_refactor_optimizeimports = "<leader>ro Optmize imports"
let g:WhichKeyDesc_refactor_inline = "<leader>ri Inline"
let g:WhichKeyDesc_refactor_anonymoustoinner = "<leader>ra Anonymous To inner"
let g:WhichKeyDesc_refactor_move = "<leader>rm Move"

" Source generation (leader s)
let g:WhichKeyDesc_leader_source = "<leader>s Source generation actions"
let g:WhichKeyDesc_source_constructor = "<leader>sc Generate constructor"
let g:WhichKeyDesc_source_gettersetter = "<leader>sg Generate getters and setters"
let g:WhichKeyDesc_source_equals = "<leader>se Generate equals and hashCode"
let g:WhichKeyDesc_source_newclass = "<leader>sn New class"

" Errors and diagnostics (leader e)
let g:WhichKeyDesc_leader_error = "<leader>e Error and diagnostics actions"
let g:WhichKeyDesc_error_next = "<leader>en Go to next error"
let g:WhichKeyDesc_error_previous = "<leader>ep Go to previous error"


" Display Modes (leader m)
let g:WhichKeyDesc_leader_display = "<leader>m Display modes"
let g:WhichKeyDesc_display_distractionfreemode = "<leader>md Toggle distraction free mode"
let g:WhichKeyDesc_display_zenmode = "<leader>mz Toggle Zen mode"
let g:WhichKeyDesc_display_fullscreen = "<leader>mf Toggle full screen"
